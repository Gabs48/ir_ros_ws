#!/usr/bin/env python

##
# Gathering of the different state machines used by MILO for its general behaviour 
# control.
# Gabriel Urbain <gabriel.urbain@gmail.com>
# Created in March 2016
# Copyright 2016 iRobotique ASBL
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
##

import rospy as ros
from std_srvs.srv import *
from std_msgs.msg import String
from std_msgs.msg import Int32MultiArray
import threading
import demjson
from types import MethodType
import time
import subprocess


class FiniteStateMachine(threading.Thread):
	
	def __init__(self):
		threading.Thread.__init__(self)
		self.bluetooth = [False, False, False, False, False, False, False, False]
		
	def run(self):
		"Run the FSM"

		# When start running
		self.running = True

		while self.running:
			time.sleep(1)
			print("Je fonctionne..")


		return

	def stop(self):
		"Stop the FSM"
		
		self.running = False

		return

	def __ros_state_pub(self):
		"Publish current state in ROS topic"

		rate = ros.Rate(0.5)
		while not ros.is_shutdown():
			ros.loginfo("Current State: ")
			rate.sleep()

		return


	def __ros_run_srv(self, msg):
		"Run the FSM via a ROS service"

		self.start()


	def __ros_stop_srv(self, msg):
		"Stop the FSM via a ROS service"

		self.stop()

	def __ros_bluetooth_sub(self, msg):
		"ROS subscriber to check the bluetooth"
		
		ros.loginfo("iciii" + str(msg))
		i = 0
		for val in msg.data:
			ros.loginfo("Value " + str(i) + ": " + str(val))
			if val == 1:
				self.bluetooth[i] = True
			else:
				self.bluetooth[i] = False
			i += 1

		ros.loginfo(self.bluetooth)

		return 


	def start_ros_node(self):
		"Start ROS node and its publishers and services"

		ros.init_node("ir_fsm_test_rec")
		self.state_pub = ros.Publisher("fsm_state", String, queue_size=1)
		self.bluetooth_sub = ros.Subscriber("bluetooth", Int32MultiArray, \
			callback=self.__ros_bluetooth_sub, queue_size=1)

		self.run_srv = ros.Service("fsm_run", Empty, self.__ros_run_srv)
		self.stop_srv = ros.Service("fsm_stop", Empty, self.__ros_stop_srv)

		try:
			self.__ros_state_pub()
		except ros.ROSInterruptException:
			pass

		self.stop()
		return


if __name__ == '__main__':
	
	fsm = FiniteStateMachine()
	fsm.start_ros_node()